{"remainingRequest":"/Users/it_calvin/Desktop/my work/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/it_calvin/Desktop/my work/demo/src/components/pages/Products.vue?vue&type=style&index=0&id=01367bb8&scoped=true&lang=css&","dependencies":[{"path":"/Users/it_calvin/Desktop/my work/demo/src/components/pages/Products.vue","mtime":1653988324369},{"path":"/Users/it_calvin/Desktop/my work/demo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/it_calvin/Desktop/my work/demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/it_calvin/Desktop/my work/demo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/it_calvin/Desktop/my work/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/it_calvin/Desktop/my work/demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAKdGgsIHRkIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCg=="},{"version":3,"sources":["Products.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6YA;AACA;AACA","file":"Products.vue","sourceRoot":"src/components/pages","sourcesContent":["<template>\n  <div>\n    <!-- 啟用loading-overlay的元件，貼在第一層div之內，不可貼到最外層的div -->\n    <div class=\"vld-parent\">\n      <!-- 當isLoading = true的時候就會啟用，false的時候就會停用，因為isLoading是一個功能，因此要在data()return{}物件中宣告變數 -->\n      <loading :active.sync=\"isLoading\"></loading>\n    </div>\n\n    <div class=\"text-right mt-4\">\n      <!-- data-toggle=\"modal\" data-target=\"#productModal\" 為modal（互動視窗畫面）指向 -->\n      <!-- <button class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#productModal\">建立新的產品</button> -->\n      <!-- 因為我們希望modal視窗可以在資料庫取得資料以後才觸發，因此新增按鈕觸發功能'openModal()' -->\n      <button class=\"btn btn-primary\" @click=\"openModal(true)\">建立新的產品</button>\n    </div>\n    <table class=\"table mt-4\">\n      <thead>\n        <tr>\n          <th width=\"120\">分類</th>\n          <th>產品名稱</th>\n          <th width=\"120\">原價</th>\n          <th width=\"120\">售價</th>\n          <th width=\"120\">是否啟用</th>\n          <th width=\"120\">編輯</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"item in products\" :key=\"item.id\">\n          <td>{{ item.category }}</td>\n          <td>{{ item.title }}</td>\n          <td>{{ item.origin_price | currency }}</td>\n          <td>{{ item.price | currency }}</td>\n          <td>\n            <span v-if=\"item.is_enabled\" class=\"text-success\">啟用</span>\n            <span v-else>未啟用</span>\n          </td>\n          <button\n            class=\"btn btn-outline-primary btn-sm mr-1 mt-2\"\n            @click=\"openModal(false, item)\"\n          >編輯</button>\n          <button class=\"btn btn-outline-danger btn-sm mt-2\" @click=\"openDelModal(item)\">刪除</button>\n        </tr>\n      </tbody>\n    </table>\n    <!-- 為了將資料寫入後端，使用v-model綁定資料 -->\n\n    <!-- 產品列表的分頁製作 -->\n     <Pagination :pagination=\"pagination\" @changePage=\"getProducts\"></Pagination> \n    <!-- 以頁面元件的方式插入Pagination， -->\n    <!-- :pagination為自定義名稱的功能，綁定data裡的pagination物件 -->\n    <!-- @changePage：在觸發任何改變時，觸發Pagination裡newPage(page)裡的this.$emit('changePage',page)，向上觸發getProducts(page)來更新api資料 -->\n\n    <!-- 新增及編輯產品 Modal -->\n    <div\n      class=\"modal fade\"\n      id=\"productModal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog modal-lg\" role=\"document\">\n        <div class=\"modal-content border-0\">\n          <div class=\"modal-header bg-dark text-white\">\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n              <span>新增產品</span>\n            </h5>\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-sm-4\">\n                <div class=\"form-group\">\n                  <label for=\"image\">輸入圖片網址</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"image\"\n                    v-model=\"tempProduct.imageUrl\"\n                    placeholder=\"請輸入圖片連結\"\n                  />\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"customFile\">\n                    或 上傳圖片\n                    <!-- 在上傳圖片的地方加上轉圈圈的loading效果，如果有在載入狀態就會觸發(true) -->\n                    <i class=\"fas fa-spinner fa-spin\" v-if=\"status.fileUploading\"></i>\n                  </label>\n                  <!-- 在input欄位中新增一個@change並帶入一個uploadFile，代表當有任何變更時觸發uploadFile的行為 -->\n                  <input\n                    type=\"file\"\n                    id=\"customFile\"\n                    class=\"form-control\"\n                    ref=\"files\"\n                    @change=\"uploadFile\"\n                  />\n                </div>\n                <img\n                  img=\"https://images.unsplash.com/photo-1483985988355-763728e1935b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=828346ed697837ce808cae68d3ddc3cf&auto=format&fit=crop&w=1350&q=80\"\n                  class=\"img-fluid\"\n                  :src=\"tempProduct.imageUrl\"\n                  alt\n                />\n              </div>\n              <div class=\"col-sm-8\">\n                <div class=\"form-group\">\n                  <label for=\"title\">標題</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"title\"\n                    v-model=\"tempProduct.title\"\n                    placeholder=\"請輸入標題\"\n                  />\n                </div>\n\n                <div class=\"form-row\">\n                  <div class=\"form-group col-md-6\">\n                    <label for=\"category\">分類</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"category\"\n                      v-model=\"tempProduct.category\"\n                      placeholder=\"請輸入分類\"\n                    />\n                  </div>\n                  <div class=\"form-group col-md-6\">\n                    <label for=\"price\">單位</label>\n                    <input type=\"unit\" class=\"form-control\" id=\"unit\" v-model=\"tempProduct.unit\" placeholder=\"請輸入單位\" />\n                  </div>\n                </div>\n\n                <div class=\"form-row\">\n                  <div class=\"form-group col-md-6\">\n                    <label for=\"origin_price\">原價</label>\n                    <input\n                      type=\"number\"\n                      class=\"form-control\"\n                      id=\"origin_price\"\n                      v-model=\"tempProduct.origin_price\"\n                      placeholder=\"請輸入原價\"\n                    />\n                  </div>\n                  <div class=\"form-group col-md-6\">\n                    <label for=\"price\">售價</label>\n                    <input\n                      type=\"number\"\n                      class=\"form-control\"\n                      id=\"price\"\n                      v-model=\"tempProduct.price\"\n                      placeholder=\"請輸入售價\"\n                    />\n                  </div>\n                </div>\n                <hr />\n\n                <div class=\"form-group\">\n                  <label for=\"description\">產品描述</label>\n                  <textarea\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"description\"\n                    v-model=\"tempProduct.description\"\n                    placeholder=\"請輸入產品描述\"\n                  ></textarea>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"content\">說明內容</label>\n                  <textarea\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"content\"\n                    v-model=\"tempProduct.content\"\n                    placeholder=\"請輸入產品說明內容\"\n                  ></textarea>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"form-check\">\n                    <input\n                      class=\"form-check-input\"\n                      type=\"checkbox\"\n                      v-model=\"tempProduct.is_enabled\"\n                      id=\"is_enabled\"\n                    />\n                    <label class=\"form-check-label\" for=\"is_enabled\">是否啟用</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">取消</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"updateProduct\">確認</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 刪除產品 Modal -->\n    <div\n      class=\"modal fade\"\n      id=\"delProductModal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content border-0\">\n          <div class=\"modal-header bg-danger text-white\">\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n              <span>刪除產品</span>\n            </h5>\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            是否刪除\n            <strong class=\"text-danger\">{{ tempProduct.title }}</strong>\n            <span>? 商品刪除後將無法恢復。</span>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">取消</button>\n            <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteProduct\">確認刪除</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport $ from \"jquery\"; // 因為openModal中有使用到'$'，而'$'是屬於jQuery功能中的變數，因此必須在這邊載入jQuery\nimport Pagination from '@/components/Pagination'; // 為了將Pagination.vue作為元件插入，需要import\n\nexport default {\n  name: \"Products\",\n  data() {\n    return {\n      products: [],\n      pagination: {},\n      tempProduct: {},\n      isNew: false, // 判定是要新增還是編輯產品的model判斷式\n      // isLoading: false, // 預設先讓loading效果關閉\n      status: {\n        fileUploading: false\n      }\n    };\n  },\n  components: { \n    Pagination, // 為了將Pagination.vue作為元件插入，這邊將上面import Pagination導入後作為元件在Products.vue裡使用\n  },\n  methods: {\n    // 將api中的產品匯入產品頁面中\n    getProducts(page = 1) { // 為了讓產品列表可以在一載入時就將第一頁當作預設頁面，參數可以設定為page = 1，此為ES6的方法\n      // 取得API資料                                                // 切換頁：在products後面加上?page={page}，可讓切換頁面有實際作用\n      const api = `${process.env.VUE_APP_APIPATH}/api/${process.env.VUE_APP_CUSTOMPATH}/products?page=${page}`;\n      const vm = this; // 為了待會將API的資料匯入data裡，這邊先將vm宣告起來，避免this指向錯誤\n      console.log(process.env.VUE_APP_APIPATH, process.env.VUE_APP_CUSTOMPATH);\n      vm.$store.dispatch(\"updateLoading\", true); // 讓頁面在載入api中的產品資料時才啟用loading效果\n      this.$http.get(api).then(response => {\n        console.log(response.data);\n        vm.isLoading = false; // 然後再載入完成以後關閉loading效果\n        vm.products = response.data.products; // 將response.data，也就是從API取得的資料傳入上面data中的products:[]中\n        vm.pagination = response.data.pagination; // 將頁面讀取以後的pagination資料帶入此vue中pagination的物件\n        console.log('response.data.pagination:', response.data);\n      });\n    },\n\n    // 打開新增或編輯產品modal\n    openModal(isNew, item) {\n      if (isNew) {\n        this.tempProduct = {}; // 如果是新增的時候，this.tempProduct就會是一個空的物件\n        this.isNew = true;\n      } else {\n        // this.tempProduct = item; 這邊如果只有打 = item，那會因為物件傳參考的特性，導致兩邊都一樣（意即修改前後都一樣，互相衝突？）\n        this.tempProduct = Object.assign({}, item); // 因此，使用Object.assign({}, item)的方式，將item宣告成另一個新的物件\n        this.isNew = false;\n      }\n      $(\"#productModal\").modal(\"show\");\n    },\n\n    // 打開刪除產品的modal\n    openDelModal(item) {\n      console.log(item);\n      this.tempProduct = item;\n      $(\"#delProductModal\").modal(\"show\");\n    },\n\n    // 刪除產品的功能\n    deleteProduct() {\n      const vm = this;\n      const api = `${process.env.VUE_APP_APIPATH}/api/${process.env.VUE_APP_CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;\n      console.log(process.env.VUE_APP_APIPATH, process.env.VUE_APP_CUSTOMPATH);\n      this.$http.delete(api).then(response => {\n        // 刪除api內資料：this.$http.『delete』，其餘語法都一樣\n        console.log(response.data);\n        if (response.data.success) {\n          $(\"#delProductModal\").modal(\"hide\");\n          vm.getProducts();\n        } else {\n          $(\"#delProductModal\").modal(\"hide\");\n          vm.getProducts();\n          console.log(\"刪除失敗\");\n        }\n      });\n    },\n\n    // 更新產品列表的功能\n    updateProduct() {\n      // 將資料新增上傳到API資料庫                                          // 這邊/product不加s\n      // 為了使用if新增修改並更新api資料庫的功能原本的const api要改成let api，因為const是唯讀狀態，不可賦予新的值\n      let api = `${process.env.VUE_APP_APIPATH}/api/${process.env.VUE_APP_CUSTOMPATH}/admin/product`; // /product前要加上admin，這邊是參考課程api內容說的\n      let httpMethod = \"post\";\n      const vm = this; // 為了待會將API的資料匯入data裡，這邊先將vm宣告起來，避免this指向錯誤\n\n      //  使用if新增修改並更新api資料庫的功能\n      if (!vm.isNew) {\n        // 假設isNew的資料不是新的而是要進行修改的時候，就使用修改產品的api\n        api = `${process.env.VUE_APP_APIPATH}/api/${process.env.VUE_APP_CUSTOMPATH}/admin/product/${vm.tempProduct.id}`;\n        httpMethod = \"put\";\n      }\n      console.log(process.env.VUE_APP_APIPATH, process.env.VUE_APP_CUSTOMPATH);\n      this.$http[httpMethod](api, { data: vm.tempProduct }).then(response => {\n        // this.$http.後面的get是作為取得資料，這邊因為是要新增資料進資料庫，因此用post\n        // 因為也要將vm.tempProduct丟進資料庫，所以這邊也要寫\n        // 但是由於要送出的資料是包在物件中的data，因此我們也需要用物件的方式{}，並且指定data以下的資料送出，所以必須寫成{ data: vm.tempProduct }\n        console.log(response.data);\n        // vm.products = response.data.products;\n        // 將response.data，也就是從API取得的資料傳入上面data中的products:[]中\n        // vm.products這行也必須要刪除或註解掉，不然會把response.data的資料又再次寫進vm裡面\n\n        // 使用if新增一個功能，如果有成功新增產品的話，就把modal視窗關閉\n        if (response.data.success) {\n          $(\"#productModal\").modal(\"hide\"); // modal('hide')即關閉modal視窗之功能\n          vm.getProducts(); // 並隨後立即再取得一次所有api的資料\n        } else {\n          // 新增失敗跟新增成功一樣，只是會多出一段訊息\n          // 意思就是沒有新增成功，但是也會關掉modal並且重新載入api資料，然後透過console跳出提醒訊息\n          $(\"#productModal\").modal(\"hide\");\n          vm.getProducts();\n          console.log(\"新增失敗\");\n        }\n      });\n    },\n    // 上傳圖片\n    uploadFile() {\n      console.log(this);\n      const uploadedFile = this.$refs.files.files[0];\n      const vm = this;\n      const formData = new FormData();\n      formData.append(\"file-to-upload\", uploadedFile); // 將檔案以表單的方式送出，使用'file-to-upload'的欄位，然後將uploadedFile資料送出\n      const url = `${process.env.VUE_APP_APIPATH}/api/${process.env.VUE_APP_CUSTOMPATH}/admin/upload`; // 定義上傳路徑\n      vm.status.fileUploading = true; // 讓頁面在上傳產品的照片時才啟用loading效果\n      this.$http\n        .post(url, formData, {\n          // (url=上傳路徑, formData=上傳內容, 做後再帶上一個物件，帶上物件的目的是將格式改為FormData的格式\n          headers: {\n            \"Content-Type\": \"multipart/form-data\" // multipart/form-data就是FormData的格式\n          }\n        })\n        .then(response => {\n          // 使用Promise來檢查上傳資料有沒有成功\n          console.log(response.data);\n          vm.status.fileUploading = false; // 載入產品圖片完成以後就會切換成關閉效果\n          // 在將圖片拖拉到上傳圖片區時，成功的話會取得要上傳的圖片網址，這個網址路徑會需要對應到tempProduct的imageUrl路徑\n          // 使用if：如果上傳圖片是成功的，那就將圖片的網址帶入tempProduct的網址內\n          // if (response.data.success) {\n          //   vm.tempProduct.imageUrl = response.data.imageUrl;\n          // }\n          // 但這樣寫，在上傳產品圖片的時候並不會將網址顯示於網址欄位，因為沒有查看屬性時並沒有getter跟setter，因此沒有雙向綁定\n          // 因此要使用set將這個欄位強制寫入\n          if (response.data.success) {\n            vm.$set(vm.tempProduct, \"imageUrl\", response.data.imageUrl); // vm.$set的寫入方式(物件, 寫入的屬性, 值)\n          } else {\n            this.$bus.$emit(\"message:push\", response.data.message, \"danger\");\n          }\n        });\n    },\n  },\n  computed: {\n    isLoading() {\n      return this.$store.state.isLoading; // 讀取store/index.js裡的vuex管理中的isLoading\n    },\n  },\n  // 在頁面載入完成後自動掛載getProducts功能，將產品從api導入頁面\n  created() {\n    this.getProducts();\n  }\n};\n</script>\n\n<style scoped>\n  \nth, td {\n  text-align: center;\n}\n\n</style>"]}]}